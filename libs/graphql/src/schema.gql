# === Inputs ===
input CategoryInput {
  id: ID!
  title: String!
}

input ScrapePublicationsPayloadInput {
  categories: [String!]!
  query: String!
  sort: String!
  types: [String!]!
  skip: Int!
  size: Int!
}

input FetchPublicationsInput {
  authority: String
  isBoardRuling: Boolean
  isBroughtToCourt: Boolean
  title: String
  page: Int
  limit: Int
}
input FetchPublicationsInput {
  authority: String
  isBoardRuling: Boolean
  isBroughtToCourt: Boolean
  title: String
}

# === Types ===
type CategoryCount {
  category: String!
  count: Int!
}

type Document {
  file: String!
  title: String!
}

type Publication {
  id: ID!
  highlights: [String!]!
  type: String!
  categories: [String!]!
  jnr: [String!]!
  title: String!
  abstract: String
  published_date: String!
  date: String!
  is_board_ruling: Boolean!
  is_brought_to_court: Boolean!
  authority: String!
  body: String
  documents: [Document!]
}

type FetchPublicationsResponse {
  totalCount: Int!
  elapsedMilliseconds: Int!
  categoryCounts: [CategoryCount!]!
  publications: [Publication!]!
}

type ScrapePublicationsJobData {
  categories: [String!]!
  query: String!
  sort: String!
  types: [String!]!
  skip: Int!
  size: Int!
}

type ScrapePublicationsResponse {
  name: String!
  id: String!
  data: ScrapePublicationsJobData!
}

# === Mutations ===
type Mutation {
  scrapePublications(
    payload: ScrapePublicationsPayloadInput!
  ): ScrapePublicationsResponse!
}

# === Queries ===
type Query {
  fetchPublication(publicationId: String!): Publication!
  fetchPublications(
    filter: FetchPublicationsInput
    page: Int
    limit: Int
  ): [Publication!]!
}
